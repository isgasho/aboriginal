package main

import (
	"bytes"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"
	"strings"

	"github.com/vasilevp/aboriginal/generic"

	"github.com/alexflint/go-arg"
	"golang.org/x/tools/imports"
)

var cfg struct {
	Input   string `arg:"-i"`
	Output  string `arg:"-o"`
	Verbose bool   `arg:"-v"`
	Version bool   `arg:"-V"`
}

var version string = "0.0.1"

func main() {
	arg.MustParse(&cfg)

	if cfg.Version {
		fmt.Println(version)
		return
	}

	if !cfg.Verbose {
		log.SetOutput(ioutil.Discard)
	}

	var in io.Reader
	var intermediate = new(bytes.Buffer)
	var out io.Writer
	var err error

	if cfg.Input == "" || cfg.Input == "-" {
		in = os.Stdin
	} else {
		in, err = os.Open(cfg.Input)
		if err != nil {
			log.Panic(err)
		}
	}

	if cfg.Output == "" || cfg.Output == "-" {
		out = os.Stdout
	} else {
		out, err = os.Create(cfg.Output)
		if err != nil {
			log.Panic(err)
		}
	}

	_, err = intermediate.Write(
		[]byte(
			fmt.Sprintf("// Code generated by \"aboriginal %s\"; DO NOT EDIT.\n\n", strings.Join(os.Args[1:], " ")),
		),
	)
	if err != nil {
		log.Panic(err)
	}

	err = generic.Process(in, intermediate, cfg.Input)
	if err != nil {
		log.Panic(err)
	}

	result, err := imports.Process(cfg.Output, intermediate.Bytes(), nil)
	if err != nil {
		log.Panic(err)
	}

	out.Write(result)
}
